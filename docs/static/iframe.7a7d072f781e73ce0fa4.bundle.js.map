{"version":3,"file":"static/iframe.7a7d072f781e73ce0fa4.bundle.js","sources":["webpack:///./src/components/ChatInput/ChatInput.jsx"],"sourcesContent":["import React from 'react'\nimport Box, { styled, colors, Button, Input } from '../../theme'\n//import { parseCommand } from './chat-commands'\n\nconst ActivityTrackerBox = styled(Box)`\n  color: ${colors.active};\n  justify-content: space-between;\n  padding: .5em 24px;\n  background: rgba(57, 59, 65, 0.3); // TODO colors.main with opacity 30%\n  margin-bottom: 4px;\n`\n\nconst ActivityTracker = styled(Box)`\n`\nconst CurrentTime = styled(Box)`\n`\n\nconst InputFieldBox = styled(Box)`\n  width: 100%;\n  height: 78px;\n`\n\nconst InputField = styled.textarea`\n  resize: none;\n  overflow: hidden;\n  &:focus { outline: none; }\n\n  color: ${colors.active};\n  display: flex;\n  flex-grow: 1;\n  font-size: 28px;\n  border: none;\n  padding: 22px 19px 22px 0;\n  background: transparent;\n  ${props => props.isEmpty && `opacity: 0.4;`}\n`\n\nconst Dot = styled.div`\n  display: flex;\n  align-self: center;\n  height: 8px;\n  width: 8px;\n  margin: 0 20px;\n  border-radius: 8px;\n  background: ${props => props.isActive ? '#808185' : 'red'};\n`\n\nclass ChatInput extends React.Component {\n  state = {\n    mode: 'text', // text, dice, whisper\n    message: undefined,\n    whisperTo: null,\n  }\n\n  input = null\n\n  send (event) {\n    const { message, whisperTo, mode } = this.state\n    const { send, onSend, clearOnSend } = this.props\n    //const command = this.parseCommand(message) // TODO no command parsing for now, just chat\n    //console.log(message)\n\n    if ( 'text' === mode )\n      send({content: message})\n    if ( 'whisper' === mode )\n      send({content: message, to: whisperTo})\n    //if ( 'dice' === mode ) return;\n\n    onSend(message)\n    if ( clearOnSend ) {\n      this.setState({message: undefined})\n      this.input.value = null\n      event.preventDefault()\n    }\n  }\n\n  onClickWhisperName () {\n    this.setState({whisperTo: null, mode: 'text'})\n  }\n\n  render () {\n    const { message } = this.state\n    const { placeholder } = this.props\n\n    const inputProps = { \n      ref: el => this.input = el,\n      value: message,\n      placeholder,\n      isEmpty: !message || message.length === 0,\n      onChange: event => {\n        const { onChange } = this.props\n        this.setState({message: event.target.value})\n        onChange(event.target.value)\n      },\n      onKeyDown: event => {\n        const { onHistoryPrevious, onHistoryNext } = this.props\n        const { message } = this.state\n        if ( 'ArrowUp' === event.key ) onHistoryPrevious(message)\n        if ( 'ArrowDown' === event.key ) onHistoryNext(message)\n      },\n      onKeyPress: event => {\n        const { onKeyPress, sendOnEnter } = this.props\n        onKeyPress(event)\n\n        if ( 'Enter' === event.key ) {\n          if ( event.shiftKey ) return;\n          if ( !sendOnEnter ) return;\n          if ( !message.length ) return;\n          this.send(event)\n        }\n      }\n    }\n    //console.log(inputProps)\n\n    return (\n      <React.Fragment>\n        <ActivityTrackerBox>\n          <ActivityTracker>{ \"somebody is typing...\" }</ActivityTracker>\n          <CurrentTime>{ \"22:06 PM\" }</CurrentTime>\n        </ActivityTrackerBox>\n        <Box style={{background: colors.main}}>\n          <Dot isActive={'text' === this.state.mode}/>\n          <InputFieldBox>\n            <InputField {...inputProps} />\n          </InputFieldBox>\n        </Box>\n      </React.Fragment>\n    )\n  }\n}\n\nChatInput.defaultProps = {\n  onChange: f => f,\n  onKeyPress: f => f,\n  onSend: f => f,\n  send: f => f,\n  sendOnEnter: true,\n  clearOnSend: true,\n  onHistoryNext: f => f,\n  onHistoryPrevious: f => f,\n  placeholder: 'Talk in #local',\n}\n\nexport default ChatInput\n"],"mappings":"AAIA","sourceRoot":""}